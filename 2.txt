#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <signal.h>

void signal_handler(int signal_number) {
	printf("Parent process receives SIGCHLD signal\n");
}

int main(int argc, char *argv[]){

	pid_t pid, parent_pid;
	int status;
	char *sys_signallist[] = {
		NULL,        // 0
		"SIGHUP",    // 1
		"SIGINT",    // 2
		"SIGQUIT",   // 3
		"SIGILL",    // 4
		"SIGTRAP",   // 5
		"SIGABRT",   // 6
		"SIGBUS",    // 7
		"SIGFPE",    // 8
		"SIGKILL",   // 9
		"SIGUSR1",   // 10
		"SIGUSR2",   // 11
		"SIGPIPE",   // 12
		"SIGALRM",   // 13
		"SIGTERM",   // 14
		"SIGSTKFLT", // 15
		"SIGCHLD",   // 16
		"SIGCONT",   // 17
		"SIGSTOP",   // 18
		"SIGTSTP",   // 19
		"SIGTTIN",   // 20
		"SIGTTOU",   // 21
		"SIGURG",    // 22
		"SIGXCPU",   // 23
		"SIGXFSZ",   // 24
		"SIGVTALRM", // 25
		"SIGPROF",   // 26
		"SIGWINCH",  // 27
		"SIGIO",     // 28
		"SIGPWR",    // 29
		"SIGSYS"     // 30
	};

	signal(SIGCHLD, signal_handler);

	printf("Process start to fork\n");
	
	parent_pid = getpid();
	printf("I'm the Parent Process, my pid = %d\n", parent_pid);

	if ((pid = fork()) == 0) {
		pid_t my_pid = getpid();
		printf("I'm the Child Process, my pid = %d\n", my_pid);
		printf("Child process start to execute test program:\n");
		char *args[] = {argv[1], NULL};
		execvp(argv[1], args);
		exit(0);
	}
	waitpid(-1, &status, WUNTRACED);
	
	if (WIFEXITED(status)) {
		printf("Normal termination with EXIT STATUS = %d\n", WEXITSTATUS(status));
	}
	else if (WIFSIGNALED(status)) {
		printf("child process get %s signal\n", sys_signallist[WTERMSIG(status)]);
	}
	else if (WIFSTOPPED(status)) {
		printf("child process get SIGSTOP signal\n");
	}
	
	exit(0);
}
