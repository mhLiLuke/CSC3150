#include <linux/module.h>
#include <linux/sched.h>
#include <linux/pid.h>
#include <linux/kthread.h>
#include <linux/kernel.h>
#include <linux/err.h>
#include <linux/slab.h>
#include <linux/printk.h>
#include <linux/jiffies.h>
#include <linux/kmod.h>
#include <linux/fs.h>
#include<linux/moduleparam.h>

MODULE_LICENSE("GPL");

#define WTERMSIG(status)      ((status) & 0x7f)

struct wait_opts {
	enum pid_type		wo_type;
	int			wo_flags;
	struct pid		*wo_pid;

	struct waitid_info	*wo_info;
	int			wo_stat;
	struct rusage		*wo_rusage;

	wait_queue_entry_t		child_wait;
	int			notask_error;
};

extern pid_t kernel_clone(struct kernel_clone_args *args);
extern void __noreturn do_exit(long code);//
extern long do_wait(struct wait_opts *wo);
//extern struct filename *getname(const char __user * filename);
extern int do_execve(struct filename *filename,
	  const char __user *const __user *__argv, 
	  const char __user *const __user *__envp);

struct task_struct *task;


int my_execve(void) {
	//const char *const argv[] = {program_path, NULL};
	//const char *const envp[] = {"SHELL=/bin/bash", "HOME=/", "PATH=/sbin:/bin:/usr/bin", NULL};
	//struct filename* my_filename = getname_kernel(program_path);
	//if (IS_ERR(my_filename)) {
	// 	printk(KERN_ERR "getname failed with error: %ld\n", PTR_ERR(my_filename));
	//}
	//status = do_execve(my_filename, argv, envp);
	int status = 0;
	//char program_path[] = "home/vagrant/test/test";
	char program_path[] = "/home/vagrant/csc3150/CSC3150/program2/test";
	char *argv[] = {program_path, NULL};
	char *envp[] = {NULL};
	printk("[program2] : child process\n");
	status = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_PROC);
	printk("The status is %d\n", (status & 0x7f));
	do_exit(WTERMSIG(status));
}

void my_wait(pid_t pid) 
{
	char *sys_signallist[] = {
		NULL,        // 0
		"SIGHUP",    // 1
		"SIGINT",    // 2
		"SIGQUIT",   // 3
		"SIGILL",    // 4
		"SIGTRAP",   // 5
		"SIGABRT",   // 6
		"SIGBUS",    // 7
		"SIGFPE",    // 8
		"SIGKILL",   // 9
		"SIGUSR1",   // 10
		"SIGUSR2",   // 11
		"SIGPIPE",   // 12
		"SIGALRM",   // 13
		"SIGTERM",   // 14
		"SIGSTKFLT", // 15
		"SIGCHLD",   // 16
		"SIGCONT",   // 17
		"SIGSTOP",   // 18
		"SIGTSTP",   // 19
		"SIGTTIN",   // 20
		"SIGTTOU",   // 21
		"SIGURG",    // 22
		"SIGXCPU",   // 23
		"SIGXFSZ",   // 24
		"SIGVTALRM", // 25
		"SIGPROF",   // 26
		"SIGWINCH",  // 27
		"SIGIO",     // 28
		"SIGPWR",    // 29
		"SIGSYS"     // 30
	};
	int status;
	struct wait_opts wo;
	struct pid *wo_pid = find_get_pid(pid);

	enum pid_type type = PIDTYPE_PID;

	wo.wo_type = type;
	wo.wo_pid = wo_pid;
	wo.wo_flags = WUNTRACED;
	wo.wo_info = NULL;
	wo.wo_rusage = NULL;
	wo.wo_stat = &status;

	int a;
	a = do_wait(&wo);

	printk("[program2] : get %s signal\n", sys_signallist[wo.wo_stat]);
	printk("[program2] : child process terminated\n");
	printk("[program2] : The return signal is %d\n", wo.wo_stat);

	put_pid(wo_pid);

	return ;
} 



//implement fork function
int my_fork(void *argc){
	
	
	//set default sigaction for current process
	
	int i;
	struct k_sigaction *k_action = &current->sighand->action[0];
	for(i=0;i<_NSIG;i++){
		k_action->sa.sa_handler = SIG_DFL;
		k_action->sa.sa_flags = 0;
		k_action->sa.sa_restorer = NULL;
		sigemptyset(&k_action->sa.sa_mask);
		k_action++;
	}
	
	pid_t child_pid;
	pid_t parent_pid;

	struct kernel_clone_args kargs = {
		.exit_signal = SIGCHLD,
		.flags = CLONE_FS,
		.stack = my_execve,
		.tls = 0,
		.child_tid = NULL,
		.parent_tid = NULL
	};

	child_pid = kernel_clone(&kargs);
	parent_pid = current->pid;

	printk("[program2] : The child process has pid = %d", child_pid);
	printk("[program2] : This is the parent process, pid = %d", parent_pid);

	my_wait(child_pid);

	/* fork a process using kernel_clone or kernel_thread */
	
	/* execute a test program in child process */
	
	/* wait until child process terminates */
	
	do_exit(0);
}

static int __init program2_init(void){

	printk("[program2] : Module_init\n");

	printk("[program2] : Module_init create kthread start\n");
	task = kthread_create(&my_fork, NULL, "MY_FORK");
	
	if (!IS_ERR(task)) {
		printk("[program2] : Module_init kthread start\n");
		wake_up_process(task);
	}

	return 0;
}

static void __exit program2_exit(void){
	printk("[program2] : Module_exit\n");
}

module_init(program2_init);
module_exit(program2_exit);
